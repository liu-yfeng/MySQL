## 注意：个别建议可能需要根据实际情况作调整，请自行判断或联系我，本人不对这些建议结果负相应责任
## 本配置文件主要适用于MySQL 5.7版本,
## 物理内存 64G，
##　MySQL数据库服务器主机名 mysqldb,
## 服务器上只跑 MySQL 服务
## MySQL安装文件路径 /usr/local/mysql
## MySQL数据文件路径 /data/mysql
## MySQL监听端口 3306
## MySQL SOCKET 文件位置 /data/mysql/mysql.sock
## 该实例预计有多少个数据表 512
## 该实例预计最大并发连接数 512
## binlog保留多久(单位：天) 7天
## 排序(ORDER BY)、分组(GROUP BY)之类的查询 不算多的情况下
##
#
## 初始化参考指令：
## mysqld --defaults-file=/data/mysql57/my.cnf --initialize --user=mysql --basedir=/usr/local/mysql57 --datadir=/data/mysql57
#
#
[client]     # 客户端默认设置内容
port	= 3306
socket	= /data/mysql57/mysql.sock

[mysql]    # 使用 mysql 命令登录 mysql 数据库时的默认设置
prompt="\u@mysqldb \R:\m:\s [\d]> "    # 命令提示符显示格式
no-auto-rehash    # 关闭数据库 tab 键补全
# auto-rehash     # 开启数据库 tab 键补全

[mysqld]    # 数据库本身的默认设置
user	= mysql     # MySQL 进程用户
port	= 3306    # 设置监听端口
basedir	= /usr/local/mysql    # MySQL 的安装路径
datadir	= /data/mysql57/    # MySQL 数据库存放路径
socket	= /data/mysql57/mysql.sock    # 指定 sock 文件存放路径
pid-file = /data/mysql57/mysqldb.pid    # MySQL 进程文件存放路径
character-set-server = utf8mb4    # utf8mb4 编码是 utf8 编码的超集，兼容 utf8，并且能存储 4 字节的表情字符
skip_name_resolve = 1    # 禁止 MySQL 对外部连接进行 DNS 解析，使用这一选项可以消除 MySQL 进行 DNS 解析的时间。但要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址的方式，否则 MySQL 将无法正常处理连接请求。
open_files_limit    = 65535    # 设置 MySQL 打开文件数,操作系统允许MySQL服务打开的文件数量。这个参数实际的值以系统启动时设定的值、max_connections和table_open_cache为基础，使用下列的规则：
                               # 1、  10 + max_connections + (table_open_cache * 2)
                               # 2、  max_connections * 5
                               # 3、  MySQL启动时指定open_files_limit的值
back_log = 1024    # MySQL 能有的连接数量。当主要 MySQL 线程在一个很短的时间内得到非常多的连接请求，这就起作用，然后主线程花些时间（尽管很短）检查连接并且启动一个新线程。back_log 值指出在 MySQL 暂时停止回答新请求之前的短时间内多少个请求可以被放在堆栈中。如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果 MySQL 的连接数据达到 max_connections 时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即 back_log，如果等待连接的数量超过 back_log，将不被授予连接资源。别外，这值（back_log)限于您的操作系统对到来的 TCP/IP 连接的侦听队列的大小。你的操作系统在这个队列大小上有它自己的限制（可以检查你的 OS 文档找出这个变量的最大值），试图设定 back_log 高于你的操作系统的限制将是无效的。
max_connections = 512    # 设置 MySQL 的最大连接数
max_connect_errors = 1000000    # 防止暴力破解超 1000000 次后禁止连接，成功连接一次后会清零。这个值默认为10，太小了，有时候网络抽风或者应用配置出现错误导致短时间内不断尝试重连服务器，客户端就会被列入黑名单，导致无法连接。如果在内网环境，可以确认没有安全问题可以把这个值设置的大一点，默认值太容易导致问题
table_open_cache = 1024    # 设置缓存表的最大数目
table_definition_cache = 1024
table_open_cache_instances = 64
thread_stack = 512K
external-locking = FALSE
max_allowed_packet = 32M    # 限制插入和更新的最大值,防止服务器发送太大的数据包，也控制服务器可以接收多大的包。默认值4M，可能会比较小。如果设置太小，有时复制上会出问题，表现为从库不能接收主库发过来的复制数据。如果表中有Blob或者Text字段，且数据量较大的话，要小心，如果数据量超过这个变量的大小，它们可能被截断或者置为NULL
sort_buffer_size = 4M    # MySQL 需要排序会话的缓冲大小
join_buffer_size = 4M    # 表间关联缓存的大小
thread_cache_size = 768    # 用来缓存空闲线程

# 查询缓存相关配置
query_cache_size = 0    # 指定 MySQL 查询缓冲区的大小
query_cache_type = 0    #关闭查询缓存

interactive_timeout = 600     # 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在 mysql_real_connect() 中使用 CLIENT_INTERACTIVE 选项的客户端。默认值： 28800 秒（8小时）
wait_timeout = 600    # 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）
  MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，
  应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，
  最终肯定会达到MySQL Server的连接上限数，这会报’too many connections’的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。
  在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，
  可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。
tmp_table_size = 32M
max_heap_table_size = 32M    # MySQL 内存表容量设置
slow_query_log = 1    # 开启慢查询。1表示开启，0表示关闭。
slow_query_log_file = /data/mysql57/slow.log    # 超过 0.1 秒的 SQL 会记录到这个日志文件
log-error = /data/mysql57/error.log   # 错误日志文件路径。
long_query_time = 0.1    # 慢查询阈值。表示所有运行时间超过0.1秒的SQL语句都记录到慢查询日志文件中。
log_queries_not_using_indexes =1
log_throttle_queries_not_using_indexes = 60
min_examined_row_limit = 100
log_slow_admin_statements = 1
log_slow_slave_statements = 1
server-id = 3306

# binlog 日志相关设置
log-bin = /data/mysql57/mybinlog    # 启用二进制日志
sync_binlog = 1
binlog_cache_size = 4M     # 二进制日志缓冲。默认32K。
max_binlog_cache_size = 2G
max_binlog_size = 1G     # 指定单个二进制日志文件的最大值，如果超过该值，则产生新的二进制日志文件，后缀名+1，并记录到.index文件。默认大小为1G。
expire_logs_days = 7    # binlog 过期清理时间
master_info_repository = TABLE
relay_log_info_repository = TABLE
gtid_mode = on    # 开启 GTID 模式。
enforce_gtid_consistency = 1    # 参数值包括：off(不检测是否有GTID不支持的语句或事务);warn(当发现有不支持的语句或事务时，返回警告，并记录到日志中)；on(当发现语句或事务不支持GTID时，返回错误)；建议在启用GTID时，在测试环境中开启此参数，处理完GTID不支持的语句后，再启用GTID。
log_slave_updates    
binlog_format = row    # 记录二进制日志的格式。
relay_log_recovery = 1
relay-log-purge = 1

# MyISAM 相关设置
key_buffer_size = 32M    # 指定用于索引的缓冲区大小，MyISAM自身只缓存索引，不缓存数据(依赖OS缓存数据)。如果大部分表都是MyISAM，那么应该为键缓存设置较多的内存
read_buffer_size = 8M    # MySQL 读入缓冲大小设置
read_rnd_buffer_size = 4M    # MySQL 随机读缓冲区大小设置
bulk_insert_buffer_size = 64M    # 批量插入缓冲大小，这个参数是针对 MyISAM 存储引擎来说的。适用于在一次性插入 100-1000+ 条记录时，提高效率。默认值是 8M。可以针对数据量的大小翻倍增加。
myisam_sort_buffer_size = 128M     # MyISAM 设置恢复表之时使用的缓冲区的大小，当在 REPAIR TABLE 或用 CREATE INDEX 创建索引或 ALTER TABLE 过程中排序 MyISAM 索引分配的缓冲区。
myisam_max_sort_file_size = 10G    # 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出。
myisam_repair_threads = 1     # 如果该值大于 1，在 Repair by sorting 过程中并行创建 MyISAM 表索引（每个索引在自己的线程内）
lock_wait_timeout = 3600
explicit_defaults_for_timestamp = 1

innodb_thread_concurrency = 0   # 0 表示不限制并发链接数
innodb_sync_spin_loops = 100
innodb_spin_wait_delay = 30

transaction_isolation = REPEATABLE-READ
#innodb_additional_mem_pool_size = 16M
innodb_buffer_pool_size = 45875M    # 设置越大，在存取表的时候所需要的 I/O 越少；根据服务器情况设置,InnoDB缓冲池 = 服务器总内存 - OS预留 - 服务器上的其他应用占用内存 - MySQL自身需要的内存 - InnoDB日志文件占用内存 - 其它内存(MyISAM键缓存、查询缓存等)
innodb_buffer_pool_instances = 8
innodb_buffer_pool_load_at_startup = 1
innodb_buffer_pool_dump_at_shutdown = 1
innodb_data_file_path = ibdata1:1G:autoextend
innodb_flush_log_at_trx_commit = 1      #  0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。
  主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1
  1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。
  2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。
     每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘
     默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。
    设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。
  总结
      设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能
innodb_log_buffer_size = 32M     # 重做日志缓冲大小，默认为 8M。innodb_log_buffer_size的大小应该要比最大的事务大小要大，否则事务还未提交innodb_log_buffer_size就已经写满了就需要进行刷新操作，会造成一个事务需要多次进行磁盘日志刷新操作，导致效率低。
innodb_log_file_size = 2G    # 重做日志文件大小，默认48M，共有2个文件，默认名称是 ib_logfile 开头。重做日志文件空间达到 75%~90%时就刷新一部分脏页到磁盘同时清空对应的重做日志空间。在InnoDB1.2.x版本之前，重做日志文件总的大小不得大于等于4GB，而1.2.x版本将该限制扩大为了512GB。
innodb_log_files_in_group = 2    # 指定日志文件组中重做日志文件的数量，默认为2。
innodb_max_undo_log_size = 4G

# 根据您的服务器IOPS能力适当调整
# 一般配普通SSD盘的话，可以调整到 10000 - 20000
# 配置高端PCIe SSD卡的话，则可以调整的更高，比如 50000 - 80000
innodb_io_capacity = 4000    # 表示磁盘IO的吞吐量,默认为200。
innodb_io_capacity_max = 8000
innodb_flush_neighbors = 0
innodb_write_io_threads = 8    # inndb write thread线程数量，默认为4。根据 CPU 核心数设置
innodb_read_io_threads = 8    # inndb read thread线程数量，默认为4。根据 CPU 核心数设置
innodb_purge_threads = 4    # inndb purge thread线程数量，默认为1。根据 CPU 核心数设置
innodb_page_cleaners = 4     # inndb page cleaner线程数量，默认为1。根据 CPU 核心数设置
innodb_open_files = 65535    # 限制 InnoDB 能打开的数据表。
innodb_max_dirty_pages_pct = 50    # 表示当缓冲池中脏页的数量占据50%时，强制进行Checkpoint，刷新一部分脏页到磁盘。默认为75。该参数在InnoDB 1.0.x 版本之前，默认值为90，之后的版本都为75。
innodb_flush_method = O_DIRECT
innodb_lru_scan_depth = 4000    # 控制LRU列表中可用页的数量，默认为1024。
innodb_checksum_algorithm = crc32
#innodb_file_format = Barracuda    # 指定文件格式
#innodb_file_format_max = Barracuda    
innodb_lock_wait_timeout = 10     # InnoDB 事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB 在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB 用 LOCK TABLES 语句注意到锁定设置。默认值是 50 秒。
innodb_rollback_on_timeout = 1
innodb_print_all_deadlocks = 1
innodb_file_per_table = 1    # InnoDB 为独立表空间模式，每个数据库的每个表都会生成一个数据空间
innodb_online_alter_log_max_size = 4G    # InnoDB存储引擎实现Online DDL的原理是在执行创建或者删除操作的同时，将INSERT、UPDATE、DELETE这类DML操作日志写入到一个缓存中。待完成索引创建后再将重做应用到表上，以此达到数据的一致性。这个缓存的大小由参数innodb_online_alter_log_max_size控制，默认大小为128M。
internal_tmp_disk_storage_engine = InnoDB
innodb_stats_on_metadata = 0

innodb_status_file = 1
# 注意: 开启 innodb_status_output & innodb_status_output_locks 后, 可能会导致log-error文件增长较快
innodb_status_output = 0
innodb_status_output_locks = 0

#performance_schema
performance_schema = 1    # 用于收集数据库服务器性能（修改之后需要重新启动 MySQL），1 表示开启，0 表示关闭。
performance_schema_instrument = '%=on'

#innodb monitor
innodb_monitor_enable="module_innodb"
innodb_monitor_enable="module_server"
innodb_monitor_enable="module_dml"
innodb_monitor_enable="module_ddl"
innodb_monitor_enable="module_trx"
innodb_monitor_enable="module_os"
innodb_monitor_enable="module_purge"
innodb_monitor_enable="module_log"
innodb_monitor_enable="module_lock"
innodb_monitor_enable="module_buffer"
innodb_monitor_enable="module_index"
innodb_monitor_enable="module_ibuf_system"
innodb_monitor_enable="module_buffer_page"
innodb_monitor_enable="module_adaptive_hash"

[mysqldump]
quick
max_allowed_packet = 32M    # 服务器发送和接受的最大包长度,防止服务器发送太大的数据包，也控制服务器可以接收多大的包。默认值4M，可能会比较小。如果设置太小，有时复制上会出问题，表现为从库不能接收主库发过来的复制数据。如果表中有Blob或者Text字段，且数据量较大的话，要小心，如果数据量超过这个变量的大小，它们可能被截断或者置为NULL
